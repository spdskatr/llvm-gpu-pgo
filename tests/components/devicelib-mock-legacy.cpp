// RUN: $HIP_PATH/bin/hipcc %s \
// RUN:   -Xoffload-linkeramdgcn-amd-amdhsa $GPUPGO_ROOT/build/gpu-rtlib/rtlib_legacy.bc \
// RUN:   -Xoffload-linkeramdgcn-amd-amdhsa -plugin-opt=-amdgpu-early-inline-all=true \
// RUN:   -Xoffload-linkeramdgcn-amd-amdhsa -plugin-opt=-amdgpu-function-calls=false \
// RUN:   -fgpu-rdc -o %t
//
// RUN: %t | FileCheck %s
//
// CHECK: Addresses correct (LEGACY)

#include <cstdint>
#define __HIP_PLATFORM_AMD__
#include <assert.h>
#include "hip/hip_runtime.h"


#define HIP_ASSERT(x) (assert((x)==hipSuccess))

enum ValueKind {
#define VALUE_PROF_KIND(Enumerator, Value, Descr) Enumerator = Value,
#include "profile/InstrProfData.inc"
};
typedef uintptr_t IntPtrT;
typedef struct __llvm_profile_data {
#define INSTR_PROF_DATA(Type, LLVMType, Name, Initializer) Type Name;
#include "profile/InstrProfData.inc"
} __llvm_profile_data;

typedef struct {
    uintptr_t DataFirst, DataLast, NamesFirst, NamesLast, CountersFirst, CountersLast;
} ProfDataLocs;


// Create mock data
// cnts must go directly before data because data contains relative pointers
__device__
__attribute__((section("__llvm_prf_cnts")))
unsigned char Counts[0x7b0];
__device__
__attribute__((section("__llvm_prf_data")))
unsigned char Data[0xf0] = { 0xd7,0xad,0xd1,0x1b,0xa8,0x5f,0x58,0xd6,0xff,0xff,0xff,0xef,0xd3,0x0a,0x4d,0x0a,0x50,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0xb0,0xe6,0xfe,0x81,0x2e,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xce,0x6b,0x76,0x8e,0x2a,0x6b,0xca,0x04,0xff,0xff,0xff,0xef,0xd3,0x0a,0x4d,0x0a,0x28,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0x30,0xe6,0xfe,0x81,0x2e,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xb9,0xea,0x60,0x0f,0xab,0xc2,0x16,0x9b,0x69,0x2b,0x59,0x31,0x69,0x7e,0x38,0x0b,0x00,0xf8,0xff,0xff,0xff,0xff,0xff,0xff,0x40,0x29,0xfe,0x81,0x2e,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf1,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x73,0xba,0x14,0x35,0x7f,0x91,0x7f,0xd0,0xff,0xff,0xff,0xef,0xd3,0x0a,0x4d,0x0a,0x58,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x9c,0x28,0xfe,0x81,0x2e,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xcd,0xe5,0xc1,0xb0,0xa0,0x5e,0xaf,0xf1,0x02,0x0f,0x2b,0x54,0x44,0x5a,0xe1,0x0a,0x30,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x27,0xfe,0x81,0x2e,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
__device__
__attribute__((section("__llvm_prf_names")))
unsigned char Names[0x51];

__device__
extern ProfDataLocs __llvm_gpuprof_loc;

extern "C"
__device__ void __llvm_profile_register_function(void *Data_);
extern "C"
__device__ void __llvm_profile_register_names_function(void *NamesStart_, uint64_t NamesSize);

__global__ void dummy_kernel() {
    for (size_t i = 0; i < sizeof(Data); i += sizeof(__llvm_profile_data)) {
        __llvm_profile_register_function(Data + i);
    }
    __llvm_profile_register_names_function(Names, sizeof(Names));
    bool cond =
        __llvm_gpuprof_loc.DataFirst == reinterpret_cast<uintptr_t>(Data) &&
        __llvm_gpuprof_loc.DataLast == reinterpret_cast<uintptr_t>(Data + sizeof(Data)) &&
        __llvm_gpuprof_loc.CountersFirst == reinterpret_cast<uintptr_t>(Counts) &&
        __llvm_gpuprof_loc.CountersLast == reinterpret_cast<uintptr_t>(Counts + sizeof(Counts)) &&
        __llvm_gpuprof_loc.NamesFirst == reinterpret_cast<uintptr_t>(Names) &&
        __llvm_gpuprof_loc.NamesLast == reinterpret_cast<uintptr_t>(Names + sizeof(Names));
    if (cond) {
        printf("Addresses correct (LEGACY)\n");
    } else {
        printf("Addresses incorrect (LEGACY)\n");
    }
}

int main() {

  hipDeviceProp_t devProp;
  HIP_ASSERT(hipGetDeviceProperties(&devProp, 0));

  hipLaunchKernelGGL(dummy_kernel,
                  dim3(1, 1),
                  dim3(1, 1),
                  0, 0);

  return 0;
}